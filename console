#!/bin/bash

CURRENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function build_gtest()
{
    mkdir -p ${CURRENT_DIR}/build/gtest
    cd ${CURRENT_DIR}/build/gtest
    cmake -DBUILD_SHARED_LIBS=ON ../../vendor/gtest
    make all
}

function build_sfml()
{
    mkdir -p ${CURRENT_DIR}/build/sfml
    cd ${CURRENT_DIR}/build/sfml
    cmake -DBUILD_SHARED_LIBS=ON ../../vendor/sfml
    make all
}

function build_vendor()
{
    build_gtest
    build_sfml
}

function build_tests()
{
    build_vendor

    mkdir -p ${CURRENT_DIR}/build
    cd ${CURRENT_DIR}/build
    cmake ${CURRENT_DIR}
    make tests
    cd ${CURRENT_DIR}
}

function do_tests()
{
    build_tests

    if [[ ! -f ${CURRENT_DIR}/bin/tests ]]; then
        exit -1
    fi

    ${CURRENT_DIR}/bin/tests
}

function build_sources()
{
    do_tests

    if [[ $? -eq 0 ]]; then
        cd ${CURRENT_DIR}/build
    	make game
    else
        exit $?
    fi
}

function build_all()
{
    build_vendor
    build_sources
    if [[ ! -f ${CURRENT_DIR}/bin/game ]]; then
        exit -1
    fi
}

function run()
{
    build_all
    cd ${CURRENT_DIR}
    ./bin/game
}

function clean()
{
    rm ${CURRENT_DIR}/bin/game ${CURRENT_DIR}/bin/tests ${CURRENT_DIR}/bin/lib/libclasses*
    rm -R ${CURRENT_DIR}/build/*
}

function rebuild()
{
    clean
    build_all
}

MODE=$1

if [[ ${MODE} == "build" ]]; then
    build_all
elif [[ ${MODE} == "run" ]]; then
    run
elif [[ ${MODE} == "test" ]]; then
    test
elif [[ ${MODE} == "clean" ]]; then
    clean
elif [[ ${MODE} == "rebuild" ]]; then
    rebuild
else
    echo -e "The Mario::Edit CLI \xF0\x9F\x92\xAA"
    echo -e "Usage: $0 COMMAND"
    echo -e ""
    echo -e "List of available commands:"
    echo "  rebuild   - clean + rebuild"
    echo "  build     - builds all sources"
    echo "  run       - runs game"
    echo "  test      - runs tests"
    echo "  clean     - does cleaning"
fi